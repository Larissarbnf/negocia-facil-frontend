// AdvertisementAPI.js - Vers√£o com debug melhorado
const BASE_URL = 'http://localhost:8080/api/v1/advertisements';

// Fun√ß√£o helper para obter o token do localStorage
const getAuthToken = () => {
    const token = localStorage.getItem('token');
    if (token) {
        console.log(`üîë Token encontrado:`, token.substring(0, 20) + '...');
        return token;
    }
    console.warn('‚ö†Ô∏è Token n√£o encontrado no localStorage');
    return null;
};

// Fun√ß√£o helper para criar headers com autentica√ß√£o
const createAuthHeaders = () => {
    const headers = {
        'Content-Type': 'application/json',
    };

    const token = getAuthToken();
    if (token) {
        headers['Authorization'] = `Bearer ${token}`;
        console.log('üîê Header Authorization adicionado:', `Bearer ${token.substring(0, 20)}...`);
    } else {
        console.warn('‚ö†Ô∏è Fazendo requisi√ß√£o sem token de autentica√ß√£o');
    }

    return headers;
};

// Fun√ß√£o para lidar com erros de resposta
const handleApiError = async (response, operation = 'opera√ß√£o') => {
    console.log(`üì° Status da resposta: ${response.status} ${response.statusText}`);

    try {
        const errorText = await response.text();
        console.error(`‚ùå Texto completo da resposta de erro:`, errorText);
        
        if (response.status === 401) {
            console.error('üö´ Erro 401: Token inv√°lido ou expirado');
            localStorage.removeItem('token');
            throw new Error('Token de autentica√ß√£o inv√°lido ou expirado. Fa√ßa login novamente.');
        }

        if (response.status === 403) {
            console.error('üö´ Erro 403: Acesso negado');
            throw new Error('Acesso negado. Voc√™ n√£o tem permiss√£o para esta opera√ß√£o.');
        }

        if (response.status === 404) {
            throw new Error('Recurso n√£o encontrado.');
        }

        throw new Error(`Erro ${response.status}: ${errorText || response.statusText}`);
    } catch (textError) {
        console.error('‚ùå Erro ao ler texto da resposta:', textError);
        throw new Error(`Erro ${response.status}: ${response.statusText}`);
    }
};

export const AdvertisementAPI = {
    // GET /advertisements/{id} - Buscar an√∫ncio espec√≠fico (VERS√ÉO MELHORADA)
    async getById(id) {
        try {
            console.log(`üîç Buscando an√∫ncio com ID: ${id}`);
            console.log(`üìç URL que ser√° chamada: ${BASE_URL}/${id}`);

            const response = await fetch(`${BASE_URL}/${id}`, {
                method: 'GET',
                headers: createAuthHeaders(),
            });

            console.log('üì° Resposta recebida:', {
                status: response.status,
                statusText: response.statusText,
                ok: response.ok
            });

            if (!response.ok) {
                await handleApiError(response, 'busca do an√∫ncio');
            }

            const data = await response.json();
            console.log('üì¶ DADOS COMPLETOS DO AN√öNCIO:', data);
            
            // üéØ LOGS DETALHADOS PARA DEBUG DOS PROBLEMAS
            console.log('üîç AN√ÅLISE DETALHADA DOS DADOS:');
            console.log('='.repeat(50));
            
            // Debug do anunciante
            console.log('üë§ DADOS DO ANUNCIANTE:');
            console.log('   - advertiser objeto completo:', data.advertiser);
            if (data.advertiser) {
                console.log('   - advertiser.id:', data.advertiser.id);
                console.log('   - advertiser.name:', data.advertiser.name);
                console.log('   - advertiser.username:', data.advertiser.username);
                console.log('   - advertiser.firstName:', data.advertiser.firstName);
                console.log('   - advertiser.lastName:', data.advertiser.lastName);
                console.log('   - advertiser.fullName:', data.advertiser.fullName);
                console.log('   - advertiser.email:', data.advertiser.email);
            }
            
            // Debug do WhatsApp
            console.log('üì± DADOS DO WHATSAPP:');
            console.log('   - whatsappNumber (raiz):', data.whatsappNumber);
            console.log('   - whatsapp (raiz):', data.whatsapp);
            console.log('   - phone (raiz):', data.phone);
            if (data.advertiser) {
                console.log('   - advertiser.whatsappNumber:', data.advertiser.whatsappNumber);
                console.log('   - advertiser.whatsapp:', data.advertiser.whatsapp);
                console.log('   - advertiser.phone:', data.advertiser.phone);
                console.log('   - advertiser.phoneNumber:', data.advertiser.phoneNumber);
                console.log('   - advertiser.celular:', data.advertiser.celular);
                console.log('   - advertiser.telefone:', data.advertiser.telefone);
            }
            
            // Debug de outros campos importantes
            console.log('üìã OUTROS DADOS IMPORTANTES:');
            console.log('   - title:', data.title);
            console.log('   - description:', data.description);
            console.log('   - status:', data.status);
            console.log('   - createdAt:', data.createdAt);
            console.log('   - images:', data.images ? data.images.length : 0, 'imagens');
            console.log('   - products:', data.products ? data.products.length : 0, 'produtos');
            console.log('   - location:', data.location);
            
            console.log('='.repeat(50));

            return data;

        } catch (error) {
            console.error('üí• Erro ao buscar an√∫ncio:', error);
            throw error;
        }
    },

    // GET /advertisements/all - Buscar todos os an√∫ncios
    async getAll() {
        try {
            console.log('üîç Iniciando busca de an√∫ncios...');
            console.log('üåê URL:', `${BASE_URL}/all`);

            const headers = createAuthHeaders();
            console.log('üìã Headers:', headers);

            const response = await fetch(`${BASE_URL}/all`, {
                method: 'GET',
                headers,
            });

            if (response.status === 204) {
                console.log('‚ÑπÔ∏è Nenhum an√∫ncio encontrado (NO_CONTENT)');
                return [];
            }

            if (!response.ok) {
                await handleApiError(response, 'busca de an√∫ncios');
            }

            const data = await response.json();
            console.log('‚úÖ Dados recebidos:', data);

            return Array.isArray(data) ? data : [];

        } catch (error) {
            console.error('üí• Erro ao buscar an√∫ncios:', error);

            if (error.name === 'TypeError' && error.message.includes('fetch')) {
                throw new Error('Erro de conex√£o com o servidor. Verifique se a API est√° rodando na porta 8080.');
            }

            throw error;
        }
    },

    // POST /advertisements/create - Criar novo an√∫ncio
    async create(advertisement) {
        try {
            console.log('üîç DEBUG COMPLETO DA CRIA√á√ÉO:');
            console.log('üìç URL que ser√° chamada:', `${BASE_URL}/create`);
            console.log('üìù Dados originais recebidos:', advertisement);

            const token = getAuthToken();
            if (!token) {
                throw new Error('‚ö†Ô∏è Token de autentica√ß√£o n√£o encontrado. Fa√ßa login primeiro.');
            }

            const requestData = {
                description: advertisement.description,
                advertiser: {
                    id: advertisement.advertiser ? advertisement.advertiser.id : (advertisement.advertiserId || 2)
                },
                products: advertisement.products || []
            };

            console.log('üì§ Dados que ser√£o enviados para o backend:', requestData);

            const response = await fetch(`${BASE_URL}/create`, {
                method: 'POST',
                headers: createAuthHeaders(),
                body: JSON.stringify(requestData),
            });

            if (!response.ok) {
                await handleApiError(response, 'cria√ß√£o do an√∫ncio');
            }

            const data = await response.json();
            console.log('‚úÖ An√∫ncio criado com sucesso:', data);

            return data;

        } catch (error) {
            console.error('üí• ERRO COMPLETO na cria√ß√£o do an√∫ncio:', error);
            throw error;
        }
    },

    // PUT /advertisements/{id} - Atualizar an√∫ncio
    async update(id, advertisement) {
        try {
            console.log(`üìù Atualizando an√∫ncio ${id}:`, advertisement);

            const token = getAuthToken();
            if (!token) {
                throw new Error('Token de autentica√ß√£o n√£o encontrado. Fa√ßa login primeiro.');
            }

            const requestData = {
                id,
                description: advertisement.description,
                createdAt: advertisement.createdAt,
                advertiser: advertisement.advertiser,
                products: advertisement.products || []
            };

            const response = await fetch(`${BASE_URL}/${id}`, {
                method: 'PUT',
                headers: createAuthHeaders(),
                body: JSON.stringify(requestData),
            });

            if (!response.ok) {
                await handleApiError(response, 'atualiza√ß√£o do an√∫ncio');
            }

            const data = await response.json();
            console.log('‚úÖ An√∫ncio atualizado:', data);

            return data;

        } catch (error) {
            console.error('üí• Erro ao atualizar an√∫ncio:', error);
            throw error;
        }
    },

    // DELETE /advertisements/{id} - Deletar an√∫ncio
    async delete(id) {
        try {
            console.log(`üóëÔ∏è Deletando an√∫ncio com ID: ${id}`);

            const token = getAuthToken();
            if (!token) {
                throw new Error('Token de autentica√ß√£o n√£o encontrado. Fa√ßa login primeiro.');
            }

            const response = await fetch(`${BASE_URL}/${id}`, {
                method: 'DELETE',
                headers: createAuthHeaders(),
            });

            if (response.status === 204) {
                console.log('‚úÖ An√∫ncio deletado com sucesso');
                return true;
            }

            if (!response.ok) {
                await handleApiError(response, 'exclus√£o do an√∫ncio');
            }

            console.log('‚úÖ An√∫ncio deletado com sucesso');
            return true;

        } catch (error) {
            console.error('üí• Erro ao deletar an√∫ncio:', error);
            throw error;
        }
    },

    // Debug de autentica√ß√£o completo
    debugAuth() {
        console.log('üîç DEBUG COMPLETO DE AUTENTICA√á√ÉO:');
        console.log('üìç URL Base:', BASE_URL);

        const token = getAuthToken();
        console.log('üîë Token encontrado:', token ? 'Sim' : 'N√£o');

        if (token) {
            console.log('üìè Tamanho do token:', token.length);
            console.log('üî§ Primeiros 50 caracteres:', token.substring(0, 50) + '...');
            console.log('üî§ √öltimos 50 caracteres:', '...' + token.substring(token.length - 50));
            
            // Tentar decodificar o JWT (apenas para debug)
            try {
                const parts = token.split('.');
                if (parts.length === 3) {
                    const payload = JSON.parse(atob(parts[1]));
                    console.log('üé≠ Payload do token:', payload);
                    console.log('üë§ Subject (usu√°rio):', payload.sub);
                    console.log('üéØ Authorities:', payload.authorities || payload.roles || 'N√£o encontrado');
                    console.log('‚è∞ Expira em:', new Date(payload.exp * 1000));
                }
            } catch (decodeError) {
                console.warn('‚ö†Ô∏è N√£o foi poss√≠vel decodificar o token:', decodeError.message);
            }
        }

        console.log('üìã Headers que ser√£o enviados:', createAuthHeaders());
        console.log('üíæ Conte√∫do completo do localStorage:');
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            const value = localStorage.getItem(key);
            console.log(`  ${key}:`, value && value.length > 100 ? value.substring(0, 100) + '...' : value);
        }
    }
};